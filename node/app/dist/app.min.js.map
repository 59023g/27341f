{"version":3,"names":[],"mappings":"","sources":["app.min.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\n// 'use strict';\n// note - vendor deps\nvar React = require('react'),\n    ReactDOM = require('react-dom'),\n\n// todo - pre-render chart on server\nd3Chart = require('./js/d3Chart.js');\n\n// note - app deps\nvar inputForm = require('./js/userInput.js');\n\nReactDOM.render(React.createElement(inputForm), document.getElementById('input'));\n\n},{\"./js/d3Chart.js\":2,\"./js/userInput.js\":3,\"react\":\"react\",\"react-dom\":\"react-dom\"}],2:[function(require,module,exports){\n'use strict';\n\nvar d3 = require('d3'),\n    _ = require('lodash');\n\n// todo - pre-render chart on server :/\n// rawData = require('../../processData.js'),\n// ReactFauxDom = require('react-faux-dom');\nvar margin = {\n  top: 50,\n  right: 0,\n  bottom: 20,\n  left: 0\n};\n\nvar selection;\nvar selectionContent;\nvar numberFormat = d3.format(\".4s\");\nvar _private = {\n  formatDate: d3.time.format(\"%Y-%m-%d\"),\n  parseDate: d3.time.format(\"%Y-%m-%d\").parse,\n  width: parseInt(d3.select('#chart').style('width'), 10),\n  height: window.innerHeight - margin.top - margin.bottom\n};\n\nvar xScale = d3.time.scale().range([0, _private.width]);\n\nvar yScale = d3.scale.linear().range([_private.height, 0]);\n\nvar xAxis = d3.svg.axis().scale(xScale);\n\nvar yAxis = d3.svg.axis().scale(yScale).orient(\"right\").ticks(5).tickFormat(function (d) {\n  return numberFormat(d);\n});\nvar dataSet = [];\n\nvar svg = d3.select(\"div#chart\").append(\"div\").classed(\"svg-container\", true).append(\"svg\").attr(\"preserveAspectRatio\", \"xMinYMin meet\").attr(\"viewBox\", \"0 0 \" + parseInt(_private.width + margin.left + margin.right) + \" \" + parseInt(_private.height + margin.bottom + margin.top)).attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\nvar d3Chart = module.exports = function () {\n  var _public = {\n    data: [],\n    sellDate: new Date(\"Sep 31 2007 00:00:00 GMT-0700 (PDT)\"),\n    buyDate: new Date(\"Tue Mar 31 2009 00:00:00 GMT-0700 (PDT)\"),\n    userHeld: [],\n    userMonthlyFixedData: [],\n    userSold: [],\n    userEquityHoldings: 1000,\n    userMonthlyFixed: 1000,\n    get: function get(url) {\n      return new Promise(function (resolve, reject) {\n        d3.json(url).on(\"progress\", function () {\n          console.log(\"progress\", d3.event.loaded);\n        }).on(\"load\", function (json) {\n          resolve(json);\n        }).on(\"error\", function (error) {\n          reject(error);\n        }).get();\n      });\n    },\n    processRaw: function processRaw(rawData) {\n      // Data - DJIA -\n      return new Promise(function (resolve, reject) {\n\n        rawData = rawData.dataset.data.reverse();\n\n        _public.data = rawData.map(function (d) {\n          var pItem = [];\n          pItem.date = _private.parseDate(d[0]);\n          pItem.close = +d[4];\n          return pItem;\n        });\n\n        resolve(_public.data);\n      });\n    },\n    calculateUserHeld: function calculateUserHeld() {\n\n      if (!_public.data) {\n        console.warn('rawData not processed');\n      } else {\n        _public.userHeld = [];\n\n        _public.data.forEach(function (d, i, a) {\n          var prevEquityHoldings = _public.userHeld[i - 1];\n          var prevMonthlyFixed = _public.userMonthlyFixedData[i - 1];\n\n          var pItem = [];\n          var pItemMonthlyFixed = [];\n          pItem.date = d.date;\n          pItemMonthlyFixed.date = d.date;\n          pItem.close = d.close;\n\n          if (!prevEquityHoldings) {\n            pItem.userClose = _public.userEquityHoldings;\n            pItem.delta = 0;\n\n            pItemMonthlyFixed.userClose = _public.userEquityHoldings;\n            pItemMonthlyFixed.delta = 0;\n          } else {\n            pItem.delta = (d.close - prevEquityHoldings.close) / prevEquityHoldings.close;\n\n            pItem.userClose = +(prevEquityHoldings.userClose + prevEquityHoldings.userClose * pItem.delta);\n\n            pItemMonthlyFixed.delta = pItem.delta;\n\n            pItemMonthlyFixed.userClose = +(prevMonthlyFixed.userClose + _public.userMonthlyFixed + prevMonthlyFixed.userClose * pItem.delta);\n          }\n\n          _public.userHeld.push(pItem);\n          _public.userMonthlyFixedData.push(pItemMonthlyFixed);\n        });\n      }\n    },\n    calculateUserSold: function calculateUserSold() {\n      _public.userSold = [];\n      var arr = _public.userHeld.slice(0);\n      var holdValue;\n\n      arr.forEach(function (d, i, a) {\n        var pItem = [];\n        pItem.date = d.date;\n        pItem.delta = d.delta;\n\n        // dates before sell\n        if (d.date <= _public.sellDate) {\n          pItem.delta = d.delta;\n          pItem.userClose = d.userClose;\n        }\n\n        // date range when hold\n        if (d.date >= _public.sellDate && d.date <= _public.buyDate) {\n          pItem.delta = 0;\n          if (holdValue) {\n            pItem.userClose = holdValue;\n          } else {\n            holdValue = d.userClose;\n            pItem.userClose = holdValue;\n          }\n        }\n\n        // date range when buy at bottom\n        if (d.date >= _public.buyDate) {\n          var prev = _public.userSold[i - 1];\n          pItem.date = d.date;\n          pItem.delta = d.delta;\n          pItem.userClose = +(prev.userClose + prev.userClose * d.delta);\n        }\n\n        _public.userSold.push(pItem);\n      });\n    },\n    calculateMonthlyFixed: function calculateMonthlyFixed() {\n      _public.userMonthlyFixedData = [];\n      var arr = _public.userHeld.slice(0);\n      var holdValue;\n\n      if (!_public.userHeld) {\n        console.warn('userHeld not processed');\n      } else {\n        arr.forEach(function (d, i, a) {\n          var prevMonthlyFixed = _public.userMonthlyFixedData[i - 1];\n\n          var pItemMonthlyFixed = [];\n          pItemMonthlyFixed.date = d.date;\n\n          if (!prevMonthlyFixed) {\n            pItemMonthlyFixed.userClose = _public.userEquityHoldings;\n            pItemMonthlyFixed.delta = 0;\n          } else {\n            pItemMonthlyFixed.delta = d.delta;\n\n            pItemMonthlyFixed.userClose = prevMonthlyFixed.userClose + _public.userMonthlyFixed + prevMonthlyFixed.userClose * pItemMonthlyFixed.delta;\n          }\n\n          _public.userMonthlyFixedData.push(pItemMonthlyFixed);\n        });\n      }\n    },\n    drawUserLine: function drawUserLine() {\n      _public.clearUserData();\n      _public.calculateUserHeld();\n      _public.render(_public.userHeld);\n\n      _public.calculateUserSold();\n      _public.render(_public.userSold);\n    },\n    drawMonthlyFixedLine: function drawMonthlyFixedLine() {\n      _public.calculateMonthlyFixed();\n      _public.render(_public.userMonthlyFixedData);\n    },\n    clearUserData: function clearUserData() {\n      // erase all userlines, re-render with default stock data\n      dataSet = [];\n      _public.render(_public.data);\n    },\n    render: function render(data) {\n\n      // create main data set with all lines to be rendered\n      dataSet.push(data);\n\n      xScale.domain(d3.extent(data, function (d) {\n        return d.date;\n      }));\n\n      var yMin = 0;\n\n      var yMax = dataSet.reduce(function (pv, cv) {\n        var currentMax = cv.reduce(function (pv, cv, i, a) {\n          if (cv.userClose) {\n            return Math.max(pv, cv.userClose);\n          } else {\n            return Math.max(pv, cv.close);\n          }\n        });\n        return Math.max(pv, currentMax);\n      }, 0);\n\n      yScale.domain([yMin, yMax]);\n\n      // todo - area ? https://github.com/mbostock/d3/wiki/Stack-Layout\n      var line = d3.svg.line().x(function (d) {\n        return xScale(d.date);\n      }).y(function (d) {\n        if (d.userClose) {\n          return yScale(d.userClose);\n        } else {\n          return yScale(d.close);\n        }\n      });\n\n      if (svg.selectAll(\".y.axis\")[0].length < 1) {\n        svg.append(\"g\").attr(\"class\", \"y axis\").call(yAxis);\n      } else {\n        svg.selectAll(\".y.axis\").transition().duration(1500).call(yAxis);\n      }\n\n      var lines = svg.selectAll(\".line\").data(dataSet).attr(\"class\", \"line\");\n\n      lines.transition().duration(1500).attr(\"d\", line).style(\"stroke\", color);\n\n      // enter any new lines\n      lines.enter().append(\"path\").attr(\"class\", \"line\").attr(\"d\", line).style(\"stroke\", color).on(\"mouseover\", findValue);\n\n      // exit\n      lines.exit().remove();\n\n      // todo - numbers not responsive size\n      svg.append(\"g\").attr(\"class\", \"x axis\").attr(\"transform\", \"translate(0,\" + _private.height + \")\").attr(\"dx\", \".71em\").call(xAxis);\n\n      function color(d, i) {\n        var colors = [\"rgb(237, 76, 76)\", \"rgb(169, 234, 136)\", \"rgb(234, 218, 136)\", \"rgb(136, 160, 234)\"];\n\n        return colors[i];\n      }\n\n      function findValue(d, i) {\n        var mouseX = d3.mouse(this.parentNode)[0];\n        var dataX = xScale.invert(mouseX);\n\n        var j = d.length;\n        while (j-- && d[j].date > dataX) {}\n\n        var datapoint;\n        if (j >= 0) {\n          if (isNaN(d[j + 1]) || dataX - d[j].date < d[j + 1].date - dataX) {\n            datapoint = d[j];\n          } else {\n            datapoint = d[j + 1];\n          }\n        } else {\n          datapoint = d[0];\n        }\n\n        drawSelectionData(i, datapoint);\n      }\n\n      // only draw selection div once\n      if (d3.selectAll(\".selection\")[0].length < 1) {\n        selection = d3.select(\".svg-container\").append(\"div\").attr(\"class\", \"selection\").style(\"opacity\", 0);\n\n        selectionContent = d3.select(\".selection\").append(\"div\").attr(\"class\", \"selection-content\");\n      }\n\n      function drawSelectionData(i, datapoint) {\n\n        var getClose;\n        var getChartName;\n        // console.log(i, datapoint);\n\n        // todo - mp - do this more efficiently, maybe add meta key to data arrays\n        if (i === 0) {\n          getChartName = 'Dow Jones Industrial Average';\n        } else if (i === 1) {\n          getChartName = 'Held equities throughout recession';\n        } else if (i === 2) {\n          getChartName = 'Sold equities at high, Held through recession, then bought at low';\n        } else if (i === 3) {\n          getChartName = 'Invested fixed amount every month, in addition to existing equity holdings';\n        }\n        var dateFormat = d3.time.format(\"%Y/%m\");\n\n        // depending on line index define which close value to use\n        if (i > 0) {\n          getClose = datapoint.userClose;\n        } else {\n          getClose = datapoint.close;\n        }\n\n        selection.transition().duration(200).style(\"opacity\", 0.9).style(\"left\", d3.event.pageX + \"px\");\n\n        selectionContent.attr(\"style\", function () {\n          return \"color:\" + color(datapoint, i);\n        }).html(numberFormat(getClose) + \"<br/>\" + \"<span style=\\\"font-size: 14px; letter-spacing: 0px; color: rgb(250, 250, 250)\\\">\" + dateFormat(datapoint.date) + \"<br/>\" + \"<div class=\\\"divider\\\"></div>\" + getChartName + \"</span>\");\n\n        if (_private.width - (d3.event.pageX + 150) < 0) {\n          d3.select(\".selection-content\").classed(\"left\", true).classed(\"right\", false);\n        } else {\n          d3.select(\".selection-content\").classed(\"right\", true).classed(\"left\", false);\n        }\n      }\n    }\n\n  };\n\n  return _public;\n}();\n\n// todo - separate draw axis, etc from the line(s)\nd3Chart.get(\"/data\").then(d3Chart.processRaw).then(d3Chart.render);\n\n},{\"d3\":\"d3\",\"lodash\":\"lodash\"}],3:[function(require,module,exports){\n'use strict';\n\nvar React = require('react'),\n    d3Chart = {};\n// todo - create global user {} for state\n// *** abstract as generic input field *** but not sure how i feel about React...\n\nvar userInput = module.exports = React.createClass({\n  displayName: 'exports',\n\n  getInitialState: function getInitialState() {\n    return {\n      monthlyFixed: {\n        value: '',\n        isNumber: false\n      },\n      equityHoldings: {\n        value: '',\n        isNumber: false\n      }\n    };\n  },\n  handleChange: function handleChange(e, i, l, f, j) {\n\n    var getFormName = e.target.form.name;\n\n    // todo - compress this... literal eval?\n    if (getFormName === \"equityHoldings\") {\n      if (!Number(e.target.value)) {\n        this.setState({\n          equityHoldings: {\n            value: '',\n            isNumber: false\n          }\n        });\n        return;\n      }\n      this.setState({\n        equityHoldings: {\n          value: e.target.value,\n          isNumber: true\n        }\n      });\n    }\n\n    if (getFormName === \"monthlyFixed\") {\n      if (!Number(e.target.value)) {\n        this.setState({\n          monthlyFixed: {\n            value: '',\n            isNumber: false\n          }\n        });\n        return;\n      }\n      this.setState({\n        monthlyFixed: {\n          value: e.target.value,\n          isNumber: true\n        }\n      });\n    }\n  },\n  handleSubmit: function handleSubmit(e) {\n    var getFormName = e.target.name;\n\n    e.preventDefault();\n    var equityHoldings = parseInt(this.state.equityHoldings.value.trim());\n    var monthlyFixed = parseInt(this.state.monthlyFixed.value.trim());\n\n    // not the prettiest ... because deadline\n\n    if (getFormName === \"monthlyFixed\" && d3Chart) {\n      this.setState({\n        equityHoldings: {\n          value: '',\n          isNumber: false\n        },\n        monthlyFixed: {\n          value: '',\n          isNumber: false\n        }\n      });\n      d3Chart.clearUserData();\n    }\n\n    if (!equityHoldings && !monthlyFixed) {\n      return;\n    } else if (getFormName === \"equityHoldings\" && d3Chart) {\n      d3Chart.userEquityHoldings = equityHoldings;\n      d3Chart.userData = [];\n      d3Chart.drawUserLine();\n\n      if (monthlyFixed) {\n        d3Chart.userMonthlyFixed = monthlyFixed;\n        d3Chart.userMonthlyFixedData = [];\n        d3Chart.drawMonthlyFixedLine();\n      }\n    }\n    // todo - post for server state sync\n  },\n  componentDidMount: function componentDidMount() {\n    d3Chart = require('./d3Chart.js');\n    console.log(d3Chart);\n  },\n  // not JSX: React.createElement('a', {href: 'https://facebook.github.io/react/'}, 'Hello!')\n  // var child1 = React.createElement('li', null, 'First Text Content');\n  // var child2 = React.createElement('li', null, 'Second Text Content');\n  // var root = React.createElement('ul', { className: 'my-list' }, child1, child2);\n  // JSX:\n  render: function render() {\n    return React.createElement(\n      'div',\n      null,\n      React.createElement(\n        'form',\n        {\n          name: 'equityHoldings',\n          onSubmit: this.handleSubmit },\n        React.createElement('input', {\n          type: 'text',\n          placeholder: 'Total Equity Holdings',\n          className: 'inputForm',\n          value: this.state.equityHoldings.value,\n          onChange: this.handleChange\n        }),\n        React.createElement('input', {\n          type: 'submit',\n          id: 'equityHoldings',\n          className: 'inputSubmit',\n          value: 'Render',\n          disabled: !this.state.equityHoldings.isNumber\n        })\n      ),\n      React.createElement(\n        'form',\n        {\n          name: 'monthlyFixed',\n          onSubmit: this.handleSubmit },\n        React.createElement('input', {\n          type: 'text',\n          placeholder: 'Monthly Fixed Investment',\n          className: 'inputForm',\n          value: this.state.monthlyFixed.value,\n          onChange: this.handleChange\n        }),\n        React.createElement('input', {\n          type: 'submit',\n          id: 'monthlyFixed',\n          className: 'inputSubmit',\n          value: 'Clear',\n          disabled: !this.state.equityHoldings.isNumber\n\n        })\n      )\n    );\n  }\n});\n\nmodule.exports = userInput;\n\n},{\"./d3Chart.js\":2,\"react\":\"react\"}]},{},[1]);\n"],"file":"app.min.js","sourceRoot":"/source/"}